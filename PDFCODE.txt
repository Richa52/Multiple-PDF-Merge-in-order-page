using iTextSharp.text;
using iTextSharp.text.pdf;
using iTextSharp.text.pdf.draw;
using System;
using System.Collections.Generic;
using System.IO;
using System.Web.Mvc;


namespace MergeMultiplePdfDemo.Controllers
{
    public class HomeController : Controller
    {
        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public ActionResult Index()
        {
            string[] PdfFiles = Directory.GetFiles(@"E:\Richa\CODE\MergeMultiplePdfDemo\MergeMultiplePdfDemo\pdf", "*.pdf");
            bool res = MergePDFs(Server.MapPath("pdf/MeargeFile.pdf"), PdfFiles);
            if (res == true)
            {
                AddPageNumber();
            }

            // MergePDFs(Server.MapPath("pdf/output.pdf"), Server.MapPath("pdf/Employee.pdf"),Server.MapPath("pdf/SampleExport.pdf"));
            return View();
        }
        public static bool MergePDFs(string outPutFilePath, params string[] filesPath)

        {
            //Define a new output document and its size, type
            Document document = new Document(PageSize.A4, 0, 0, 0, 0);
            bool merged = true;
            int indexpagecount = 1;
            try
            {
                List<PdfReader> readerList = new List<PdfReader>();
                foreach (string filePath in filesPath)
                {
                    PdfReader pdfReader = new PdfReader(filePath);
                    readerList.Add(pdfReader);
                }


                //Create blank output pdf file and get the stream to write on it.
                PdfWriter writer = PdfWriter.GetInstance(document, new FileStream(outPutFilePath, FileMode.Create));
                document.Open();
                document.NewPage();

                /* table structure make index
                                PdfPTable table = new PdfPTable(2);
                                //actual width of table in points
                                table.TotalWidth = 600f;
                                //fix the absolute width of the table
                                table.LockedWidth = true;

                                //relative col widths in proportions - 1/3 and 2/3
                                float[] widths = new float[] { 8f, 2f };
                                table.SetWidths(widths);
                                table.HorizontalAlignment = 1;
                                //leave a gap before and after the table
                                table.SpacingBefore = 20f;
                                table.SpacingAfter = 30f;

                                PdfPCell cell = new PdfPCell(new Phrase("Index\n\n\n"));
                                cell.Colspan = 2;
                                cell.Border = 1;
                                cell.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                                table.AddCell(cell);

                                for (int i = 0; i < readerList.Count; i++)
                                {
                                    int j = i + 1;

                                    table.AddCell("PDF" + j);
                                    table.AddCell("" + indexpagecount);
                                    var pagecount = readerList[i].NumberOfPages;
                                    indexpagecount = pagecount + indexpagecount;
                                }
                                document.Add(table);
                */
                Paragraph p,d;
                d = new Paragraph("\n\nTable of Contents\n\n");
                d.Alignment = Element.ALIGN_CENTER;
                document.Add(d);
                Chunk dottedLine = new Chunk(new DottedLineSeparator());
               
                for (int i = 0; i < readerList.Count; i++)
                {
                //    Chunk chunk = new Chunk("Go to page 5");
                //    PdfAction action = PdfAction.GotoLocalPage(5, new PdfDestination(0), writer);
                //    chunk.SetAction(action);

                    int j = i + 1;
                    p = new Paragraph("PDF" + j);
                    p.IndentationLeft = 60;
                    p.IndentationRight = 60;
                    p.SpacingAfter = 5;
                    p.Add(dottedLine);
                    p.Add("" + indexpagecount);
                    var pagecount = readerList[i].NumberOfPages;
                    indexpagecount = pagecount + indexpagecount;
                    document.Add(p);
                }


                foreach (PdfReader reader in readerList)
                {
                    for (int i = 1; i <= reader.NumberOfPages; i++)
                    {
                        PdfImportedPage page = writer.GetImportedPage(reader, i);
                        document.Add(Image.GetInstance(page));
                    }
                }
                
                document.Close();
                foreach (PdfReader reader in readerList)
                {
                    reader.Close();
                }
            }
            catch (Exception ex)
            {
                merged = false;
            }
            return merged;
        }
        public void AddPageNumber()
        {
            byte[] bytes = System.IO.File.ReadAllBytes(Server.MapPath("pdf/MeargeFile.pdf"));
            Font blackFont = FontFactory.GetFont("Arial", 12, Font.NORMAL, BaseColor.BLACK);
            using (MemoryStream stream = new MemoryStream())
            {
                PdfReader reader = new PdfReader(bytes);
                using (PdfStamper stamper = new PdfStamper(reader, stream))
                {
                    int j = 0;
                    int pages = reader.NumberOfPages;
                    for (int i = 1; i <= pages; i++)
                    {
                        if (i != 1)
                        {
                            ColumnText.ShowTextAligned(stamper.GetUnderContent(i), Element.ALIGN_RIGHT, new Phrase(j.ToString(), blackFont), 568f, 15f, 0);
                        }
                        j++;
                    }
                }
                bytes = stream.ToArray();
            }
            System.IO.File.WriteAllBytes(Server.MapPath("pdf/MeargeFile.pdf"), bytes);
        }

    }
}
